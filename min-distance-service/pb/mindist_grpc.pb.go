// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/proto/mindist.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MinDistanceService_GetMinDistance_FullMethodName = "/api.MinDistanceService/GetMinDistance"
)

// MinDistanceServiceClient is the client API for MinDistanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MinDistanceServiceClient interface {
	GetMinDistance(ctx context.Context, in *MinDistanceRequest, opts ...grpc.CallOption) (*MinDistanceResponse, error)
}

type minDistanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMinDistanceServiceClient(cc grpc.ClientConnInterface) MinDistanceServiceClient {
	return &minDistanceServiceClient{cc}
}

func (c *minDistanceServiceClient) GetMinDistance(ctx context.Context, in *MinDistanceRequest, opts ...grpc.CallOption) (*MinDistanceResponse, error) {
	out := new(MinDistanceResponse)
	err := c.cc.Invoke(ctx, MinDistanceService_GetMinDistance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinDistanceServiceServer is the server API for MinDistanceService service.
// All implementations must embed UnimplementedMinDistanceServiceServer
// for forward compatibility
type MinDistanceServiceServer interface {
	GetMinDistance(context.Context, *MinDistanceRequest) (*MinDistanceResponse, error)
	mustEmbedUnimplementedMinDistanceServiceServer()
}

// UnimplementedMinDistanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMinDistanceServiceServer struct {
}

func (UnimplementedMinDistanceServiceServer) GetMinDistance(context.Context, *MinDistanceRequest) (*MinDistanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinDistance not implemented")
}
func (UnimplementedMinDistanceServiceServer) mustEmbedUnimplementedMinDistanceServiceServer() {}

// UnsafeMinDistanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MinDistanceServiceServer will
// result in compilation errors.
type UnsafeMinDistanceServiceServer interface {
	mustEmbedUnimplementedMinDistanceServiceServer()
}

func RegisterMinDistanceServiceServer(s grpc.ServiceRegistrar, srv MinDistanceServiceServer) {
	s.RegisterService(&MinDistanceService_ServiceDesc, srv)
}

func _MinDistanceService_GetMinDistance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinDistanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinDistanceServiceServer).GetMinDistance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinDistanceService_GetMinDistance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinDistanceServiceServer).GetMinDistance(ctx, req.(*MinDistanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MinDistanceService_ServiceDesc is the grpc.ServiceDesc for MinDistanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MinDistanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.MinDistanceService",
	HandlerType: (*MinDistanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMinDistance",
			Handler:    _MinDistanceService_GetMinDistance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/mindist.proto",
}
